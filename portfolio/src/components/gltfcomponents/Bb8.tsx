/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 bb8.gltf -t
Author: StarWars-Universe (https://sketchfab.com/SWU)
License: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
Source: https://sketchfab.com/3d-models/bb8-animated-15db7644c5b645f195f4d2dc0c5154ec
Title: BB8 (Animated)
*/

import * as THREE from 'three'
import React, { Ref, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    BB8BB8_Body_Scene_Material_0: THREE.Mesh
    BB8BB8_Body_Scene_Material_0_1: THREE.Mesh
    BB8Hatch_Door_Scene_Material_0: THREE.Mesh
    BB8Antena_Scene_Material1_0: THREE.Mesh
    BB8BB8_Head_Scene_Material1_0: THREE.Mesh
    BB8BB8_Head_Scene_Material1_0_1: THREE.Mesh
    BB8Eye_Eye_0: THREE.Mesh
  }
  materials: {
    Scene_Material: THREE.MeshStandardMaterial
    Scene_Material1: THREE.MeshStandardMaterial
    material: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Animation'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/bb8.gltf') as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group as Ref<THREE.Group>} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.69}>
          <group name="3924ee77ba9a46c58a2abc9fdcf9971cfbx" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="BB8BB8" scale={0}>
                  <group name="BB8Center_NeutralPose" position={[0, 62, 0]}>
                    <group name="BB8Center">
                      <group name="BB8BB8_Body">
                        <mesh name="BB8BB8_Body_Scene_Material_0" geometry={nodes.BB8BB8_Body_Scene_Material_0.geometry} material={materials.Scene_Material} />
                        <mesh name="BB8BB8_Body_Scene_Material_0_1" geometry={nodes.BB8BB8_Body_Scene_Material_0_1.geometry} material={materials.Scene_Material} />
                      </group>
                      <group name="BB8Hatch_Door">
                        <mesh name="BB8Hatch_Door_Scene_Material_0" geometry={nodes.BB8Hatch_Door_Scene_Material_0.geometry} material={materials.Scene_Material} />
                      </group>
                    </group>
                  </group>
                  <group name="BB8Center_Head_NeutralPose" position={[0, 62, 0]}>
                    <group name="BB8Center_Head">
                      <group name="BB8Antena">
                        <mesh name="BB8Antena_Scene_Material1_0" geometry={nodes.BB8Antena_Scene_Material1_0.geometry} material={materials.Scene_Material1} />
                      </group>
                      <group name="BB8BB8_Head">
                        <mesh name="BB8BB8_Head_Scene_Material1_0" geometry={nodes.BB8BB8_Head_Scene_Material1_0.geometry} material={materials.Scene_Material1} />
                        <mesh name="BB8BB8_Head_Scene_Material1_0_1" geometry={nodes.BB8BB8_Head_Scene_Material1_0_1.geometry} material={materials.Scene_Material1} />
                      </group>
                      <group name="BB8Eye">
                        <mesh name="BB8Eye_Eye_0" geometry={nodes.BB8Eye_Eye_0.geometry} material={materials.material} />
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/bb8.gltf')
